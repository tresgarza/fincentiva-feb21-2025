const { createClient } = require("@supabase/supabase-js"); const supabaseUrl = "https://ydnygntfkrleiseuciwq.supabase.co"; const supabaseServiceKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlkbnlnbnRma3JsZWlzZXVjaXdxIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczOTk5MjQwNiwiZXhwIjoyMDU1NTY4NDA2fQ.TwhEGW9DK4DTQQRquT6Z9UW8T8UjLX-hp9uKdRjWAhs"; const supabase = createClient(supabaseUrl, supabaseServiceKey); async function getTables() { const { data, error } = await supabase.from("information_schema.tables").select("table_name").eq("table_schema", "public"); if (error) { console.error("Error fetching tables:", error); return; } return data; } async function describeTable(tableName) { const { data, error } = await supabase.from("information_schema.columns").select("column_name, data_type, is_nullable, column_default").eq("table_schema", "public").eq("table_name", tableName); if (error) { console.error(`Error describing table ${tableName}:`, error); return; } return data; } async function main() { try { const tables = await getTables(); console.log("=== TABLAS EN LA BASE DE DATOS ==="); console.log(tables.map(t => t.table_name).join("
")); for (const table of tables) { const tableName = table.table_name; console.log(`
=== ESTRUCTURA DE LA TABLA: ${tableName} ===`); const columns = await describeTable(tableName); columns.forEach(col => { console.log(`${col.column_name} (${col.data_type}) ${col.is_nullable === "YES" ? "NULL" : "NOT NULL"} ${col.column_default ? `DEFAULT ${col.column_default}` : ""}`); }); } } catch (err) { console.error("Error general:", err); } } main();
